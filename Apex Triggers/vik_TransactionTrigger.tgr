trigger vik_TransactionTrigger on IATSPayment__Transaction__c (after insert) {
    
    //iterate over transactions present in the trigger
    for(IATSPayment__Transaction__c trans : trigger.new){ 
        
        System.debug('vik_TransactionTrigger initiated');
        Opportunity[] opp = [SELECT Id, npsp__Primary_Contact__c, recordtypeid, Free_Gift_Type__c, Shirt_Size__c  FROM Opportunity WHERE Id= :trans.IATSPayment__Opportunity__c];
        
//A. If there is no opportunity present (erroneous case) or transaction declined
        if(opp.isEmpty()){
            System.debug('No Opportunity associated with the transaction: ' + trans.Name);
            List<User> admins = [SELECT FirstName, Email FROM User WHERE Profile.Name = 'System Administrator'];
            //Email to all admins
            for(User admin: admins){
                System.debug('Initiating Email to - ' + admin.Email);
                String[] toAddresses = new String[]{admin.Email};
                String emailBody = 'Dear ' + admin.FirstName + ',\n\n' + 
                    'There was some problem with the transaction ID ' + trans.Name +
                    '. The transaction did not map to any of the donations and hence, ' + 
                    'did not trigger any acknowledgement. Please follow up ' +
                    'with the issue using the provided ID. \n\nQuick tip - \n1. Search the code ID ' + 
                    'in the search bar. \n2. Add relevant Opportunity by looking it up. ' + 
                    '\n3. Manually send acknowledgement.\n\n Best regards!\nVikash';
                String subject = 'Salesforce - Error in transaction details';
                vik_sendEmail.sendPlainEmail(toAddresses, null, subject, emailBody);
            }
            continue;
        }
        
//B. If there is an opportunity and transaction got rejected
        if(trans.IATSPayment__Status__c.contains('Reject')){
            System.debug('Transaction got rejected: ' + trans.Name);
            List<User> admins = [SELECT FirstName, Email FROM User WHERE Profile.Name = 'System Administrator'];
            //Email to all admins
            for(User admin: admins){
                System.debug('Sending Email to - ' + admin.Email);
                String[] toAddresses = new String[]{admin.Email};
                String emailBody = 'Dear ' + admin.FirstName + ',\n\n' + 
                    'The transaction with ID ' + trans.Name +
                    ' got rejected. It can be due to lot of reasons like incorrect payment details, etc. ' + 
                    'Please reach out to the concerned person if number of rejected transactions is alarming ' +
                    'as it might be due to a bug in the system. \n\nPlease don\'t be alarmed if this is the only email ' + 
                    'with a rejected transaction, as it is perfectly normal.\n\n Best regards!\nVikash';
                String subject = 'Salesforce - Transaction Rejected';
                vik_sendEmail.sendPlainEmail(toAddresses, null, subject, emailBody);
            }
            continue;
        }
        
//C. If there is an opportunity present and transaction is approved (ideal case)
    //__a. Add Last Transaction ID and Payment Method to Opportunity
        opp[0].Last_Transaction__c = trans.Id;        
        
        System.debug('ACH - ' + trans.IATSPayment__ACH_Account_Number__c);
        System.debug('CC - ' + trans.IATSPayment__Credit_Card__c);
        
        if(trans.IATSPayment__ACH_Account_Number__c != null && trans.IATSPayment__Status__c.contains('Approved')){
            opp[0].Payment_Method__c = trans.IATSPayment__Method_of_Payment__c + ': ' + trans.IATSPayment__ACH_Account_Number__c;
        }
        else if(trans.IATSPayment__Credit_Card__c != null && trans.IATSPayment__Status__c.contains('Approved')){
            opp[0].Payment_Method__c = trans.IATSPayment__Method_of_Payment__c + ': ' + trans.IATSPayment__Credit_Card__c;
        }        
        upsert opp[0];
        
    //__b. Update Payment Method in Corresponding Payment
        try{
            List<npe01__OppPayment__c> pay = [SELECT Name, npe01__Payment_Method__c FROM npe01__OppPayment__c 
                                                WHERE npe01__Opportunity__c = :opp[0].id AND npe01__Payment_Amount__c=:trans.IATSPayment__Amount_currency__c];
            pay[0].npe01__Payment_Method__c = trans.IATSPayment__Method_of_Payment__c;
            upsert pay[0];
        } catch (Exception e){
            System.debug('Failed to update Payment Method');
            vik_sendEmail.sendError('Failed to update Payment Method for - ' + opp[0].Id);
        }
        
    //__c. Send Email if approved
    	List<String> toRecipients=new List<String>();
        List<String> ccRecipients=new List<String>();
        List<Contact> con = new List<Contact>();
        try{
            con = [SELECT Id, Name, Email, npe01__Home_Address__c, Phone FROM Contact WHERE Id= :opp[0].npsp__Primary_Contact__c];
            toRecipients=new List<String>{con[0].Email};
            ccRecipients=new List<String>{'im.kumarvikash@gmail.com'};
            Id targetObjId=opp[0].npsp__Primary_Contact__c;
            Id whatId=opp[0].Id;
            String orgWideEmailAddress='First Responders Foundation';
            Boolean saveAsActivity=TRUE;
            String templateApiName='Payment_Acknowledgement';
            System.debug('Checking if Record Type is Membership for Opportunity: ' + opp[0].Id + ' with Record Type: ' + opp[0].recordtypeid);
            if(Schema.SObjectType.Opportunity.getRecordTypeInfosById().get(opp[0].recordtypeid).getname().equals('Membership')){
                templateApiName='Membership_Acknowledgement';
                System.debug('Record Type: Membership');
            }
            System.debug('Record Type: Donation');
            
            String emailResult = vik_sendEmail.sendTemplatedEmail(toRecipients, null, templateApiName, targetObjId, whatId, orgWideEmailAddress, saveAsActivity);
            System.debug(LoggingLevel.INFO,'** entered PostedOppTrigger, to:' + toRecipients + ' cc:' + ccRecipients +  ' templateAPI:' + templateApiName + ' tagetObjId:' + targetObjId + 
                            ' whatId:' + whatId + ' orgWideEmailId: ' + orgWideEmailAddress);    
                    
            if(emailResult.equalsIgnoreCase('success')){
                //Update Acknowledgement Date and Status
                opp[0].npsp__Acknowledgment_Status__c = 'Acknowledged';
                opp[0].npsp__Acknowledgment_Date__c = Date.today();
            }
            else{
                //Update Acknowledgement Status
                opp[0].npsp__Acknowledgment_Status__c = 'Email Acknowledgment Not Sent';
            }
            upsert(opp[0]);
            System.debug('Opportunity Acknowledgement Status updated.');
        } catch (Exception e){
            vik_sendEmail.sendError('There was a problem sending email for the Gift Id' + opp[0].Id);
        }
        
        //If Booster Club with a gift, send email to vendor
        System.debug('Record Type: ' + Schema.SObjectType.Opportunity.getRecordTypeInfosById().get(opp[0].recordtypeid).getname() + ', Free Gift: ' + opp[0].Free_Gift_Type__c);
        if(Schema.SObjectType.Opportunity.getRecordTypeInfosById().get(opp[0].recordtypeid).getname().equals('Membership') && opp[0].Free_Gift_Type__c!='I registered at an event and have already received my gift' && opp[0].Free_Gift_Type__c!='I do not wish to receive a gift to maximize my contribution' && opp[0].Free_Gift_Type__c != null){
            System.debug('Preparing email for the vendor');
            try{
                Contact[] vendor = [SELECT FirstName, Email FROM Contact WHERE Account.Name='Merchandise Vendor_FRF (Internal)' LIMIT 1];
                toRecipients=new List<String>{vendor[0].Email};
                //ccRecipients=new List<String>{'contact@firstrespondersomaha.org'};
                System.debug('Vendor Found: ' + vendor[0].FirstName + ' (' + vendor[0].Email + ')');
                String subject = 'FRF: New Booster Club Member with Gift- ' + opp[0].Free_Gift_Type__c;
                String plainBody = 'Dear ' + vendor[0].FirstName + ',\n\n'
                     + 'We have received a new membership request with the below details- \n\n'
                    + '\tName - ' + con[0].Name
                    + '\n\tGift Type - ' + opp[0].Free_Gift_Type__c
                    + '\n\tT-Shirt Size - ' + opp[0].Shirt_Size__c + '. (Please ignore this field if Gift Type is not a T-Shirt)'
                    + '\n\tAddress - ' + con[0].npe01__Home_Address__c
                    + '\n\tPhone - ' + con[0].Phone
                    + '\n\n*Please note that this is a system generated email.'
                    + '\n\nBest regards,\nFirst Responders Foundation';
                String sentStatus = vik_sendEmail.sendPlainEmail(toRecipients, ccRecipients, subject, plainBody);
                if(sentStatus != 'success'){
                    vik_sendEmail.sendError('The below email failed to be sent to the vendor -\n\n' + plainBody);
                }
            } catch (Exception e){
                System.debug('Email failed to send. Please check if there are any vendors added.' + e.getMessage());
                String errorBody = 'There was a problem emailing the vendor for a new Booster Club Member. ' + 
                    'Please verify if there is any vendor added. Please use the below information to troubleshoot -\n\n'
                    + '\nContact Id: ' + con[0].Id
                    + '\nGift/Membership Id: ' + opp[0].Id;
                vik_sendEmail.sendError(errorBody);
            }
        }
    }
}

/*
IATSPayment__Transaction__c trans = new IATSPayment__Transaction__c();
trans.Name = 'ZZZ999111';
trans.IATSPayment__Status__c = 'Approved - 11265';
trans.IATSPayment__Amount_currency__c = 50;
trans.IATSPayment__Opportunity__c = '0064F000003BIQoQAO';
insert trans;
*/

/* Testing bulk
List<IATSPayment__Transaction__c> transList = new List<IATSPayment__Transaction__c>{};
IATSPayment__Transaction__c trans = new IATSPayment__Transaction__c();
trans.Name = 'ZZZ001003';
trans.IATSPayment__Status__c = 'Approved - 11265';
trans.IATSPayment__Method_of_Payment__c = 'Credit Card';
trans.IATSPayment__Amount_currency__c = 50;
transList.add(trans);

trans = new IATSPayment__Transaction__c();
trans.Name = 'ZZZ001004';
trans.IATSPayment__Amount_currency__c = 50;
trans.IATSPayment__Status__c = 'Approved - 11265';
trans.IATSPayment__Method_of_Payment__c = 'Credit Card';
transList.add(trans);

trans = new IATSPayment__Transaction__c();
trans.Name = 'ZZZ001005';
trans.IATSPayment__Amount_currency__c = 50;
trans.IATSPayment__Status__c = 'Reject - 11265';
trans.IATSPayment__Method_of_Payment__c = 'Credit Card';
trans.IATSPayment__Opportunity__c = '0064F000003BIQoQAO';
transList.add(trans);

trans = new IATSPayment__Transaction__c();
trans.Name = 'ZZZ001006';
trans.IATSPayment__Amount_currency__c = 50;
trans.IATSPayment__Status__c = 'Approved - 11265';
trans.IATSPayment__Method_of_Payment__c = 'Credit Card';
trans.IATSPayment__Opportunity__c = '0064F000003BIQoQAO';
transList.add(trans);
    
insert transList;
*/

/*
IATSPayment__Transaction__c trans = new IATSPayment__Transaction__c();
trans.Name = 'ZZZ999151';
trans.IATSPayment__Amount_currency__c = 50;
trans.IATSPayment__Method_of_Payment__c = 'Credit Card';
trans.IATSPayment__Credit_Card__c = '422******2220';
trans.IATSPayment__Opportunity__c = '0064F000003BIQoQAO';
trans.IATSPayment__Status__c = 'Approved: Alpha';
insert trans;
 */